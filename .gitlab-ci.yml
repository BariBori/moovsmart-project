stages:
  - pre-compile
  - compile
  - test
  - package
  - deploy

variables:
  # needed for Docker-In-Docker
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay
  # project's gitlab ci registry
  MOOVSMART_REGISTRY: $CI_REGISTRY/fort.zsuzsanna/angular-moovsmart
  FRONTEND_HOST: 3.18.213.29
  FRONTEND_USER: $server_user
  BACKEND_HOST: 127.0.0.1:8080
  BACKEND_USER: $server_user

default:
  image: docker:18
  services:
    - docker:18-dind

Update BE compile image:
  stage: pre-compile
  script:
    # make pushing and pulling possible
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # update BE compile image
    - > 
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/zulu-maven:latest 
        -f zulu-maven.dockerfile
        .
    # push BE env
    - docker push $MOOVSMART_REGISTRY/zulu-maven:latest    
  when: manual

Update FE test image:
  stage: pre-compile
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/node-chromium:latest 
        -f moovsmart/node-chromium.dockerfile
        moovsmart
    # push image
    - docker push $MOOVSMART_REGISTRY/node-chromium:latest    
  when: manual

Cache node_modules:
  stage: pre-compile
  image: node:current-alpine
  script:
    - apk add --no-cache make gcc g++ python 
    - cd moovsmart
    - npm ci --silent
  cache:
    key: node
    paths:
      - moovsmart/node_modules
  only:
    changes:
      - moovsmart/package-lock.json

Lint FE:
  stage: pre-compile
  image: node:current-alpine
  script:
    - cd moovsmart
    - npm run-script lint
  cache:
    key: node
    paths:
      - moovsmart/node_modules
  only:
    changes:
      - moovsmart/**/*
  allow_failure: true

Compile FE:
  stage: compile
  image: node:current-alpine
  script:
    - cd moovsmart
    - npm run-script ci-build
  cache:
    key: node
    paths:
      - moovsmart/node_modules
  artifacts:
    paths:
      - moovsmart/dist  
      - moovsmart/nginx.conf
    expire_in: 1 hour
  only:
    changes:
      - moovsmart/**/*

Compile BE:
  stage: compile
  image: $MOOVSMART_REGISTRY/zulu-maven:latest
  script:
    - mvn package -DskipTests
  # cache jar for package stage  
  artifacts:
    paths:
      - target/project-1.0-SNAPSHOT.jar
    expire_in: 1 hour
  only:
    changes:
      - src/**/*
      - pom.xml


BE mvn test:
  stage: test
  image: $MOOVSMART_REGISTRY/zulu-maven:latest
  script:
    - mvn test
  tags:
    - test
  only:
    changes:
      - src/**/*
      - pom.xml

FE karma test:
  # FE test image build in init stage
  image: $MOOVSMART_REGISTRY/node-chromium:latest
  stage: test
  script:
    - cd moovsmart
    - npm run-script ci-test
  tags:
    - test
  cache:
    key: node
    paths:
      - moovsmart/node_modules
  only:
    changes:
      - moovsmart/**/*
  allow_failure: true

Package BE:
  stage: package
  before_script:  
    # make pushing and pulling possible
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    #build BE prod image
    - > 
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/backend-prod:latest 
        -f prod.dockerfile
        .
    # push prod image
    - docker push $MOOVSMART_REGISTRY/backend-prod:latest  
  only:
    changes:
      - src/**/*
      - pom.xml

Package FE:
  stage: package
  before_script:  
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    #build FE prod image
    - > 
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/frontend-prod:latest 
        -f moovsmart/prod.dockerfile
        moovsmart
    - docker push $MOOVSMART_REGISTRY/frontend-prod:latest  
  only:
    changes:
      - moovsmart/**/*

Deploy app:
  stage: deploy
  variables:
    DOCKER_HOST: ssh://$server_user@$remote_address
  before_script:  
    # install and run ssh
    - apk add --no-cache openssh && eval $(ssh-agent -s)
    # add ssh identity
    - chmod 400 moovsmart.pem && ssh-add moovsmart.pem
    # execute an ssh command on remote server to get around host checking prompt
    - ssh -o StrictHostKeyChecking=no $server_user@$remote_address 'pwd'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # update docker-compose file on server
    - scp docker-compose.yml $server_user@$remote_address:/home/ec2-user/docker-compose.yml
    # update prod images on server
    - docker pull $MOOVSMART_REGISTRY/backend-prod:latest  
    - docker pull $MOOVSMART_REGISTRY/frontend-prod:latest 
    # stop services, cleanup docker, and start them again
    - ssh $server_user@$remote_address 'docker-compose down && docker system prune -f && docker-compose up -d'
  only:
    - master
