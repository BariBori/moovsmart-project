stages:
  - pre-compile
  - compile
  - test
  - deploy

variables:
  # needed for Docker-In-Docker
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay
  # project's gitlab ci registry
  MOOVSMART_REGISTRY: $CI_REGISTRY/fort.zsuzsanna/angular-moovsmart
  FRONTEND_HOST: 127.0.0.1
  FRONTEND_USER: $server_user
  BACKEND_HOST: 127.0.0.1
  BACKEND_USER: $server_user


Create BE compile image:
  stage: pre-compile
  image: docker:18
  services:
    - docker:18-dind   
  script:
    # make pushing and pulling possible
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # update BE compile image
    - > 
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/backend-compile:latest 
        -f compile.dockerfile
        .
    # push BE env
    - docker push $MOOVSMART_REGISTRY/backend-compile:latest    
  only:
    changes:
      - pom.xml


Create FE compile and test images:
  stage: pre-compile
  image: docker:18
  services:
    - docker:18-dind   
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # build FE compile image
    - > 
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/frontend-compile:latest 
        -f moovsmart/compile.dockerfile
        moovsmart
    # build FE test image
    - > 
        docker build
        --rm
        --tag $MOOVSMART_REGISTRY/frontend-test:latest 
        -f moovsmart/test.dockerfile
        moovsmart
    # push images
    - docker push $MOOVSMART_REGISTRY/frontend-compile:latest    
    - docker push $MOOVSMART_REGISTRY/frontend-test:latest    
  only:
    changes:
      - moovsmart/package.json
      - moovsmart/package-lock.json

Compile FE:
  stage: compile
  image: $MOOVSMART_REGISTRY/frontend-compile:latest  
  script:
    # copy cache if exists
    - >
        [ -d $CI_PROJECT_DIR/moovsmart/node_modules/.cache ]
        && mv $CI_PROJECT_DIR/moovsmart/node_modules/.cache /frontend/node_modules/
    - cd moovsmart
    # copy files to where node_modules are
    - mv angular.json tsconfig.json tsconfig.app.json ci-build.sh nginx.conf src /frontend/
    # actual business
    - cd /frontend
    - npm run-script ci-build
    # move cache and artifacts to where gitlab sees them
    - mv dist $CI_PROJECT_DIR/moovsmart/
    - mv node_modules/.cache $CI_PROJECT_DIR/moovsmart/node_modules/
  cache:
    key: node_modules
    paths:
      - moovsmart/node_modules/.cache
  artifacts:
    paths:
      - moovsmart/dist  
  # only:
  #   changes:
  #     - moovsmart/src/*
  #     - moovsmart/angular.json
  #     - moovsmart/tsconfig.json
  #     - moovsmart/tsconfig.app.json
  #     - moovsmart/nginx.conf
  #     - moovsmart/ci-build.sh

# BE mvn test:
#   stage: test
#   # use BE env image build in init stage
#   image: $MOOVSMART_REGISTRY/backend-compile:latest
#   script:
#     # run tests as well
#     - mvn package
#   # cache jar for deploy stage  
#   artifacts:
#     paths:
#       - target/project-1.0-SNAPSHOT.jar
#   tags:
#     - test
#   only:
#     changes:
#       - src/*

# FE karma test:
#   # FE test image build in init stage
#   image: $MOOVSMART_REGISTRY/frontend-test:latest
#   stage: test
#   script:
#     - cd moovsmart
#     - npm run-script ci-test
#   tags:
#     - test
#   cache:
#     key: node_modules
#     paths:
#       - moovsmart/node_modules
#   # only:
#   #   changes:
#   #     - moovsmart/*

# Package app:
#   stage: deploy
#   image: docker:18
#   services:
#     - docker:18-dind   
#   script:
#     # make pushing and pulling possible
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     #build BE prod image
#     - > 
#         docker build
#         --rm
#         --tag $MOOVSMART_REGISTRY/backend-prod:latest 
#         -f prod.dockerfile
#         .
#     # push BE prod image
#     - docker push $MOOVSMART_REGISTRY/backend-prod:latest  
#     #build FE prod image
#     - > 
#         docker build
#         --rm
#         --tag $MOOVSMART_REGISTRY/frontend-prod:latest 
#         -f moovsmart/prod.dockerfile
#         moovsmart
#     # push FE prod image
#     - docker push $MOOVSMART_REGISTRY/frontend-prod:latest  


# Deploy app:
#   stage: deploy
#   image: docker:18
#   services:
#     # enable calling docker from within docker image
#     - docker:18-dind   
#   script:
#     - ssh-add moovsmart.pem
#     # make pushing and pulling possible
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

#     - scp -r moovsmart/dist/moovsmart "$server_user"@"$remote_address:/home/ec2-user/frontend"
#     - scp target/project-1.0-SNAPSHOT.jar "$server_user"@$remote_address:/home/ec2-user/project-1.0-SNAPSHOT.jar.new
#     - ssh "$server_user"@"$remote_address" './shutdown.sh && mv project-1.0-SNAPSHOT.jar.new project.jar && ./start.sh'

#   only:
#     - master
